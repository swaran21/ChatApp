// src/main/java/com/chat/model/ChatMessage.java
package com.chat.model;

import jakarta.persistence.Id;
import lombok.Data;
import lombok.NoArgsConstructor; // Add this if not present
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;

@Data
@NoArgsConstructor // Ensure Lombok generates a no-args constructor
@Document(collection = "messages")
public class ChatMessage {
    @Id
    private String id;
    private Long chatId;
    private String sender;
    private String type; // "TEXT", "VOICE", "FILE_URL"
    private String content; // Holds text, base64 audio, or file URL
    private byte[] audioData; // Only for VOICE type storage if needed, DTO uses base64
    private String audioMimeType; // Only for VOICE type
    private LocalDateTime timestamp;

    // --- Added for File Uploads ---
    private String fileName; // Original or sanitized file name
    private String fileType; // MIME type of the uploaded file (e.g., "image/jpeg", "application/pdf")
    // private Long fileSize; // Optional: Store file size if needed

    // Constructor for TEXT messages
    public ChatMessage(Long chatId, String sender, String content, String type) {
        this.chatId = chatId;
        this.sender = sender;
        this.content = content;
        this.type = type; // Should be "TEXT"
        this.timestamp = LocalDateTime.now();
    }

    // Constructor for VOICE messages (using audioData for potential storage)
    public ChatMessage(Long chatId, String sender, byte[] audioData, String audioMimeType, String type) {
        this.chatId = chatId;
        this.sender = sender;
        this.audioData = audioData;
        this.audioMimeType = audioMimeType;
        this.type = type; // Should be "VOICE"
        this.timestamp = LocalDateTime.now();
        // Note: 'content' might be null or could store metadata if needed for VOICE
    }

    // --- Constructor for FILE_URL messages ---
    public ChatMessage(Long chatId, String sender, String fileUrl, String fileName, String fileType, String type) {
        if (!"FILE_URL".equals(type)) {
            throw new IllegalArgumentException("This constructor is only for FILE_URL type messages.");
        }
        this.chatId = chatId;
        this.sender = sender;
        this.content = fileUrl; // Store the Cloudinary URL here
        this.fileName = fileName;
        this.fileType = fileType;
        this.type = type; // Should be "FILE_URL"
        this.timestamp = LocalDateTime.now();
    }

    // Getters and Setters generated by @Data
}